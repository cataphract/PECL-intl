<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.8 $ -->
<refentry xml:id="intl.NumberFormatter" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
	<refnamediv>
    <refname>NumberFormatter class</refname>
    <refpurpose>Provides locale-dependent number and currency formatting</refpurpose>
    </refnamediv>
   
    <refsect1 role="description">
    &reftitle.description;
    <simpara>
    Programs store and operate on numbers using a locale-independent binary
    representation. When displaying or printing a number it is converted to a
    locale-specific string. For example, the number 12345.67 is "12,345.67" in
    the US, "12 345,67" in France and "12.345,67" in Germany.
    </simpara>
    <simpara>
    By invoking the methods provided by the NumberFormatter class, you can
    format numbers, currencies, and percentages according to the specified or
    default locale. NumberFormatter is locale-sensitive so you need to create a
    new NumberFormatter for each locale. NumberFormatter methods format
    primitive-type numbers, such as double and output the number as a
    locale-specific string.
    </simpara>
    <para>
    For currencies you can use currency format type to create a formatter that
    returns a string with the formatted number and the appropriate currency
    sign. Of course, the NumberFormatter class is unaware of exchange rates so, the
    number output is the same regardless of the specified currency. This means
    that the same number has different monetary values depending on the currency
    locale. If the number is 9988776.65 the results will be:
    <simplelist>
    <member>9 988 776,65 € in France</member>
    <member>9.988.776,65 € in Germany</member>
    <member>$9,988,776.65 in the United States</member>
    </simplelist>
    </para>
    <simpara>
    In order to format percentages, create a locale-specific formatter with percentage 
    format type. With this formatter, a decimal fraction such
    as 0.75 is displayed as 75%.
    </simpara>
    <simpara>
    For more complex formatting, like spelled-out numbers, the rule-based number formatters are used.
    </simpara>
    <refsect2 xml:id="intl.classes.NumberFormatter.constructors">
     <title>Constructors</title>
     <itemizedlist>
      <listitem>
       <para>
        <link linkend='function.numfmt-create'>NumberFormatter::__construct</link> - create a number formatter
       </para>
      </listitem>
      <listitem>
       <para>
        <link linkend='function.numfmt-create'>NumberFormatter::create</link>-
	 creates a new number formatter. This method is useful when you prefer just to
	 get null on error, as if you called <function>numfmt_create</function>.
       </para>
      </listitem>
     </itemizedlist>
    </refsect2>
    <refsect2 xml:id="intl.classes.NumberFormatter.methods">
     &reftitle.methods;
     <itemizedlist>
      <listitem>
       <para>
        <link linkend='function.numfmt-format'>format</link> -
        format a number.
       </para>
      </listitem>
      <listitem>
       <para>
        <link linkend='function.numfmt-format-currency'>formatCurrency</link> -
        format a currency value.
       </para>
      </listitem>
      <listitem>
       <para>
        <link linkend='function.numfmt-parse'>parse</link> -
        parse number.
       </para>
      </listitem>
      <listitem>
       <para>
        <link linkend='function.numfmt-parse-currency'>parseCurrency</link> -
        parse currency value.
       </para>
      </listitem>
      <listitem>
       <para>
        <link linkend='function.numfmt-set-attribute'>setAttribute</link> -
        set numeric attribute.
       </para>
      </listitem>
      <listitem>
       <para>
        <link linkend='function.numfmt-set-text-attribute'>setTextAttribute</link> -
        set text attribute.
       </para>
      </listitem>
      <listitem>
       <para>
        <link linkend='function.numfmt-set-pattern'>setPattern</link> -
        set formatter pattern.
       </para>
      </listitem>
      <listitem>
       <para>
        <link linkend='function.numfmt-get-attribute'>getAttribute</link> -
        get numeric attribute.
       </para>
      </listitem>
      <listitem>
       <para>
        <link linkend='function.numfmt-get-text-attribute'>getTextAttribute</link> -
        get text attribute.
       </para>
      </listitem>
      <listitem>
       <para>
        <link linkend='function.numfmt-get-pattern'>getPattern</link> -
        get formatter pattern.
       </para>
      </listitem>
      <listitem>
       <para>
        <link linkend='function.numfmt-get-symbol'>getSymbol</link> -
        get formatter symbol.
       </para>
      </listitem>
      <listitem>
       <para>
        <link linkend='function.numfmt-get-locale'>getLocale</link> -
        get formatter locale.
       </para>
      </listitem>
      <listitem>
       <para>
        <link linkend='function.numfmt-get-error-code'>getErrorCode</link> -
        get formatter last error code.
       </para>
      </listitem>
      <listitem>
       <para>
        <link linkend='function.numfmt-get-error-message'>getErrorMessage</link> -
        get formatter last error message.
       </para>
      </listitem>
	  </itemizedlist>
    </refsect2>

    &reference.intl.NumberFormatter-constants;
 </refsect1>
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><link xlink:href="&url.icu.formatparse;">ICU formatting documentation</link></member>
    <member><link xlink:href="&url.icu.formatnumbers;">ICU number formatters</link></member>
    <member><link xlink:href="&url.icu.decimalformat;">ICU decimal formatters</link></member>
    <member><link xlink:href="&uri.icu.ruleformat;">ICU rule-based number formatters</link></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>