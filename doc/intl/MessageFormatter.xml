<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.3 $ -->
<refentry xml:id="intl.MessageFormatter" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
	<refnamediv>
    <refname>MessageFormatter class</refname>
    <refpurpose>
     Provides the message formatting, including locale-dependent number formats and choices.
    </refpurpose>
    </refnamediv>
   
    <refsect1 role="description">
    <simpara>
    MessageFormatter is a concrete class that enables users to produce
    concatenated, language-neutral messages. The methods supplied in this class
    are used to build all the messages that are seen by end users.
    </simpara>
    <simpara>
    The MessageFormatter class assembles messages from various fragments (such as
    text fragments, numbers, and dates) supplied by the program.
    Because of the MessageFormatter class, the program does not need to know the
    order of the fragments. The class uses the formatting specifications for the
    fragments to assemble them into a message that is contained in a single
    string within a resource bundle. For example, MessageFormatter enables you to
    print the phrase "Finished printing x out of y files..." in a manner that
    still allows for flexibility in translation.
    </simpara>
    <simpara>
    Previously, an end user message was created as a sentence and handled as a
    string. This procedure created problems for localizers because the sentence
    structure, word order, number format and so on are very different from
    language to language. The language-neutral way to create messages keeps each
    part of the message separate and provides keys to the data. Using these keys, 
    the MessageFormatter class can concatenate the parts of the message, localize them,
    and display a well-formed string to the end user.
    </simpara>
    <simpara>
    MessageFormatter takes a set of objects, formats them, and then inserts the
    formatted strings into the pattern at the appropriate places. Choice formats can
    be used in conjunction with MessageFormatter to handle plurals, match numbers,
    and select from an array of items. Typically, the message format will come 
    from resources and the arguments will be dynamically set at runtime.
    </simpara>
    <section xml:id="intl.classes.MessageFormatter.constructors">
     <title>Constructors</title>
     <itemizedlist>
      <listitem>
       <para>
        <link linkend='function.msgfmt-create'>MessageFormatter::__construct</link> - create MessageFormatter       </para>
      </listitem>
      <listitem>
       <para>
        <link linkend='function.msgfmt-create'>MessageFormatter::create</link>-
	 creates a new MessageFormatter. This method is useful when you prefer just to
	 get null on error, as if you called <function>msgfmt-create</function>.
       </para>
      </listitem>
     </itemizedlist>
    </section>
    <section xml:id="intl.classes.MessageFormatter.methods">
     &reftitle.methods;
     <itemizedlist>
           <listitem>
       <para>
        <link linkend='function.msgfmt-create'>create</link> -
        Constructs a new Message Formatter       </para>
      </listitem>
            <listitem>
       <para>
        <link linkend='function.msgfmt-format'>format</link> -
        Format the message       </para>
      </listitem>
            <listitem>
       <para>
        <link linkend='function.msgfmt-parse'>parse</link> -
        parses input string and returns any extracted items as an array       </para>
      </listitem>
            <listitem>
       <para>
        <link linkend='function.msgfmt-format-message'>formatMessage</link> -
        Format the message without creating an object       </para>
      </listitem>
            <listitem>
       <para>
        <link linkend='function.msgfmt-parse-message'>parseMessage</link> -
        parses input string and returns any extracted items as an array, without creating an object
       </para>
      </listitem>
            <listitem>
       <para>
        <link linkend='function.msgfmt-get-pattern'>getPattern</link> -
        Get the pattern used by the formatter       </para>
      </listitem>
            <listitem>
       <para>
        <link linkend='function.msgfmt-set-pattern'>setPattern</link> -
        Set the pattern used by the formatter       </para>
      </listitem>
            <listitem>
       <para>
        <link linkend='function.msgfmt-get-error-code'>getErrorCode</link> -
        Get the error code from last operation       </para>
      </listitem>
            <listitem>
       <para>
        <link linkend='function.msgfmt-get-error-message'>getErrorMessage</link> -
        Get the error text from the last operation.       </para>
      </listitem>
            <listitem>
       <para>
        <link linkend='function.msgfmt-get-locale'>getLocale</link> -
        Get the locale for which the formatter was created.       </para>
      </listitem>
      	  </itemizedlist>
    </section>

</refsect1>
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><link xlink:href="&url.icu.formatparse;">ICU formatting documentation</link></member>
    <member><link xlink:href="&url.icu.formatmsg;">ICU message formatting description</link></member>
    <member><link xlink:href="&url.icu.msgformat;">ICU message formatters</link></member>
    <member><link xlink:href="&uri.icu.choiceformat;">ICU choice formatters</link></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>
